// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/whitelist.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPCheckRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Countries            []string `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPCheckRequest) Reset()         { *m = IPCheckRequest{} }
func (m *IPCheckRequest) String() string { return proto.CompactTextString(m) }
func (*IPCheckRequest) ProtoMessage()    {}
func (*IPCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e43afd67adcf0963, []int{0}
}

func (m *IPCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPCheckRequest.Unmarshal(m, b)
}
func (m *IPCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPCheckRequest.Marshal(b, m, deterministic)
}
func (m *IPCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPCheckRequest.Merge(m, src)
}
func (m *IPCheckRequest) XXX_Size() int {
	return xxx_messageInfo_IPCheckRequest.Size(m)
}
func (m *IPCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPCheckRequest proto.InternalMessageInfo

func (m *IPCheckRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPCheckRequest) GetCountries() []string {
	if m != nil {
		return m.Countries
	}
	return nil
}

type IPCheckResponse struct {
	Whitelisted          bool     `protobuf:"varint,1,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPCheckResponse) Reset()         { *m = IPCheckResponse{} }
func (m *IPCheckResponse) String() string { return proto.CompactTextString(m) }
func (*IPCheckResponse) ProtoMessage()    {}
func (*IPCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e43afd67adcf0963, []int{1}
}

func (m *IPCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPCheckResponse.Unmarshal(m, b)
}
func (m *IPCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPCheckResponse.Marshal(b, m, deterministic)
}
func (m *IPCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPCheckResponse.Merge(m, src)
}
func (m *IPCheckResponse) XXX_Size() int {
	return xxx_messageInfo_IPCheckResponse.Size(m)
}
func (m *IPCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IPCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IPCheckResponse proto.InternalMessageInfo

func (m *IPCheckResponse) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func init() {
	proto.RegisterType((*IPCheckRequest)(nil), "pb.IPCheckRequest")
	proto.RegisterType((*IPCheckResponse)(nil), "pb.IPCheckResponse")
}

func init() { proto.RegisterFile("pb/whitelist.proto", fileDescriptor_e43afd67adcf0963) }

var fileDescriptor_e43afd67adcf0963 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0xcf, 0xc8, 0x2c, 0x49, 0xcd, 0xc9, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x52, 0xb2, 0xe3, 0xe2, 0xf3, 0x0c, 0x70, 0xce, 0x48, 0x4d, 0xce, 0x0e, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x2c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x62, 0xca, 0x2c, 0x10, 0x92, 0xe1, 0xe2, 0x4c, 0xce, 0x2f, 0xcd, 0x2b, 0x29, 0xca, 0x4c,
	0x2d, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x0c, 0x42, 0x08, 0x28, 0x19, 0x73, 0xf1, 0xc3, 0xf5,
	0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x29, 0x70, 0x71, 0xc3, 0x6d, 0x4a, 0x4d, 0x01, 0x9b,
	0xc4, 0x11, 0x84, 0x2c, 0x64, 0xe4, 0xc1, 0x25, 0x10, 0x0e, 0xe3, 0x82, 0xf5, 0xa6, 0x16, 0x09,
	0x99, 0x70, 0xb1, 0x83, 0x99, 0x9e, 0x01, 0x42, 0x42, 0x7a, 0x05, 0x49, 0x7a, 0xa8, 0xae, 0x92,
	0x12, 0x46, 0x11, 0x83, 0xd8, 0xa4, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x89, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x74, 0xa5, 0xd4, 0x0e, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WhitelistCheckerClient is the client API for WhitelistChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WhitelistCheckerClient interface {
	CheckIP(ctx context.Context, in *IPCheckRequest, opts ...grpc.CallOption) (*IPCheckResponse, error)
}

type whitelistCheckerClient struct {
	cc *grpc.ClientConn
}

func NewWhitelistCheckerClient(cc *grpc.ClientConn) WhitelistCheckerClient {
	return &whitelistCheckerClient{cc}
}

func (c *whitelistCheckerClient) CheckIP(ctx context.Context, in *IPCheckRequest, opts ...grpc.CallOption) (*IPCheckResponse, error) {
	out := new(IPCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.WhitelistChecker/CheckIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhitelistCheckerServer is the server API for WhitelistChecker service.
type WhitelistCheckerServer interface {
	CheckIP(context.Context, *IPCheckRequest) (*IPCheckResponse, error)
}

func RegisterWhitelistCheckerServer(s *grpc.Server, srv WhitelistCheckerServer) {
	s.RegisterService(&_WhitelistChecker_serviceDesc, srv)
}

func _WhitelistChecker_CheckIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelistCheckerServer).CheckIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WhitelistChecker/CheckIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelistCheckerServer).CheckIP(ctx, req.(*IPCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WhitelistChecker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WhitelistChecker",
	HandlerType: (*WhitelistCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIP",
			Handler:    _WhitelistChecker_CheckIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/whitelist.proto",
}
